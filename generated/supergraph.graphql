schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION) {
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
  graph: join__Graph!
  member: String!
) repeatable on UNION

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

interface Account
  @join__type(graph: COMMON, key: "id", isInterfaceObject: true)
  @join__type(graph: MAIN, key: "id") {
  id: ID!
  name: String! @join__field(graph: COMMON)
  accountType: AccountType! @join__field(graph: COMMON)
}

enum AccountType @join__type(graph: COMMON) {
  TOKENS_ACCOUNT @join__enumValue(graph: COMMON)
  BUSINESS_ACCOUNT @join__enumValue(graph: COMMON)
}

type BusinessAccount implements Account
  @join__implements(graph: MAIN, interface: "Account")
  @join__type(graph: BUSINESS, key: "id")
  @join__type(graph: MAIN, key: "id") {
  id: ID!
  businessId: String
  name: String! @join__field
  accountType: AccountType! @join__field
}

scalar join__FieldSet

enum join__Graph {
  BUSINESS @join__graph(name: "business", url: "http://localhost:4004/")
  COMMON @join__graph(name: "common", url: "http://localhost:4000/")
  MAIN @join__graph(name: "main", url: "http://localhost:4006/")
  TOKENS @join__graph(name: "tokens", url: "http://localhost:4002/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: BUSINESS)
  @join__type(graph: COMMON)
  @join__type(graph: MAIN)
  @join__type(graph: TOKENS) {
  businessAccounts: [BusinessAccount] @join__field(graph: BUSINESS)
  accounts: [Account] @join__field(graph: MAIN)
  tokensAccounts: [TokensAccount] @join__field(graph: TOKENS)
}

type TokensAccount implements Account
  @join__implements(graph: MAIN, interface: "Account")
  @join__type(graph: MAIN, key: "id")
  @join__type(graph: TOKENS, key: "id") {
  id: ID!
  token: String
  name: String! @join__field
  accountType: AccountType! @join__field
}
